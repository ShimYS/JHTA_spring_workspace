[★★★ 선언적 트랜잭션 처리 ★★★]
- 메소드단위로 실행된다.
- 설정방법
1. WEB-INF/spring/context-root.xml에 트랜잭션처리하기
	<!-- 트랜잭션매니저 객체를 스프링의 빈으로 등록하기 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- @Transactional 어노테이션을 감지해서 해당 객체의 메소드가 실행될 때마다 트랜잭션 처리를 지원한다. -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

2. service구현 클래스에 @Transactional 붙이기
	@Service
	@Transactional
	public class OrderServiceImpl implements OrderService{
		...
	}

- 트랜잭션 전파
	트랜잭션이 처리중인 메소드 안에서 다른 메소드가 실행되면 트랜잭션이 새로 시작되는게 아니라
	기존의 트랜잭션을 그대로 가져다 쓴다.
- RuntimeException발생할때만 rollback한다.

- sessionStatus.setComplete();를 하면 해당컨트롤로 안에서 session에 옮긴것만 삭제된다.

3. form.jsp파일에 태그 라이브러리 설치
	<%@ taglib prefix="spring" uri="http://www.springframework.org/tags" %>
	<%@ taglib prefix="form" uri="http://www.springframework.org/tags/form" %>