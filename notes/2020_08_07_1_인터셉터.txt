---인터셉터-----------------------------------------------------------------------------------------------------------------------------------------------------
동작순서
	HandlerAdapter -> intercepter전처리 -> controller -> intercepter후처리

intercepter전처리
	1. 요청 URL 분석
	2. 요청 URL에 대한 접근권한조회(ALL, USER, ADDL)
	3. 로그인한 사용자가 해당접근권한을 가졌는지 체크해서 컨트롤러의 실행여부 결정

	* 전처리 메소드가 불린값을 반환하는데 true를 반환하면 controller를 실행시키고, 
	false를 반환하면 controller 실행을 하지 않는다.
	* 이를 활용해서 로그인기능 접근권한을 컨트롤할 수 있다.

인터셉터 구현
	* DB, VO, DAO, SERVICE
	*  HandlerInterceptor 인터페이스를 구현한 클래스를 생성하면 3가지 모두 구현해야 하는데 우리는 preHandle만 필요
		preHandle - 
		postHandle - 
		afterCompletion - 요청을 보낸후 실행
	따라서, HandlerInterceptorAdapter상속받아 preHandle만 구현한다.
	
	1. 2개의 클래스를 만들고 HandlerInterceptorAdapter을 상속받아 preHandle메소드만 구현한다.
		kr.co.jhta.interceptor.AuthenticationInterceptor
		kr.co.jhta.interceptor.AuthorizationInterceptor
	2. spring -> comtext-mvc.xml 세팅
		--- 생성한 2개의 클래스를 빈으로 등록 ---
		<bean id="authenticationInterceptor" class="kr.co.jhta.interceptor.AuthenticationInterceptor"></bean>
		<bean id="authorizationInterceptor" class="kr.co.jhta.interceptor.AuthorizationInterceptor"></bean>
		
		--- /** => 모든 url에 2개의 클래스가 실행되도록 설정 ---
		<mvc:interceptors>
			-------------클래스 숫자만큼 만들어준다--------------
			<mvc:interceptor>
				<mvc:mapping path="/**"/>
				<ref bean="authenticationInterceptor"/>
			</mvc:interceptor>
			----------------------------------------------------------
			<mvc:interceptor>
				<mvc:mapping path="/**"/>
				<ref bean="authorizationInterceptor"/>
			</mvc:interceptor>
		</mvc:interceptors>

		--- resources(그림, 동영상, css, js 등)가 요청될때는 인터셉터가 동작안해도 되도록 설정
		<mvc:resources mapping="/resources/**" location="/resources/" /> 
			리소스 요청은 이 경로에서만 가져오도록 설정한다.
	3. mybaits-config.xml 
		mapper 설정

	4. mappers -> roles.xml생성 및 쿼리문 작성
	


	### 별을 2개 적으면 (/**) 모든하위 디렉토리 전부를 가르킨다.
	### 별이 1개면 바로밑에 디렉토리만 가르킨다.
	###  xml에 매핑된 순서대로 인터셉터가 동작한다.
		앞에 있는 인터셉터에서 true가 반환되어야 다음 인터셉터가 동작한다.
		앞에서 false를 반환하면 다음 인터셉터는 동작을 하지 않는다.








---필터와 인터셉터의 차이점-----------------------------------------------------------------------------------------------------------------------------------------
		
			필터				인터셉터
-----------------------------------------------------------------------------------------------------------------
기술	         -	java web API			spring의 API
위치	         -	FrontController앞에위치		FrontController와 Controller사이			
스프링컨테이너 	스프링 컨테이너의 빈이 아니다		스프링컨테이너의 빈이다
DI/AOP		사용불가				사용가능
-----------------------------------------------------------------------------------------------------------------
## 가장 큰 차이는 Spring Bean객체를 주입받을 받을 수 있나 없나이다.
## Spring Bean이 필요한 로직구현은 인터셉터로 해야하고, 필요없으면 필터로 해도된다.








---스프링 빈 등록 -----------------------------------------------------------------------------------------------------------------------------------------
## service 앞까지는 (웹과 관련된 것들) context-mvc.xml에 설정하고, 나머지는 context-root.xml과 같이 따로 만들어서 설정한다.


---기타 -----------------------------------------------------------------------------------------------------------------------------------------
## 코드가 동작은 하는데 불만족 스러울때 코드를 업그레이드 하는것 => 리팩토링(재사용성 높이고, 중복된코드 제거)

## 형변환 
Object ---> (User)
Object ---> List<User>
Object ---> List<String>
오브젝트를 컬렉션타입의 값으로 형변환 하는경우 자바가 List인지는 파악할 수 있지만 그안에 들어있는 값을 알 수 없음.
스프링은 이런경우 @SuppressWarnings("unchecked")을 클래스에 붙여서 체크를 패스함.
























